import numpy as np
import matplotlib.pyplot as plt

# Define the new training data
X = np.array([[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5]])
y = np.array([0, 0, 0, 1, 1, 1])

# Initialize weights and bias
w, b = np.zeros(X.shape[1]), 0

# Define learning rate and epochs
learning_rate, num_epochs = 0.1, 10

# Perceptron learning algorithm
for _ in range(num_epochs):
    for xi, yi in zip(X, y):
        activation = np.dot(w, xi) + b
        w += learning_rate * (yi - (activation >= 0)) * xi
        b += learning_rate * (yi - (activation >= 0))

# Decision boundary visualization
xx, yy = np.meshgrid(np.arange(X[:, 0].min() - 1, X[:, 0].max() + 1, 0.1),
                     np.arange(X[:, 1].min() - 1, X[:, 1].max() + 1, 0.1))
Z = np.dot(np.c_[xx.ravel(), yy.ravel()], w) + b
Z = np.where(Z >= 0, 1, 0).reshape(xx.shape)

# Plot decision boundary and data points
plt.contourf(xx, yy, Z, alpha=0.4)
plt.scatter(X[:, 0], X[:, 1], c=y, edgecolor='k')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('Perceptron Learning')
plt.show()
